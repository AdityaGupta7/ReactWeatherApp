{
  "_from": "redux-promise",
  "_id": "redux-promise@0.5.3",
  "_inBundle": false,
  "_integrity": "sha1-6X5snTvzdurLebq+bZBtogES1tg=",
  "_location": "/redux-promise",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "redux-promise",
    "fetchSpec": "latest",
    "name": "redux-promise",
    "raw": "redux-promise",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/redux-promise/-/redux-promise-0.5.3.tgz",
  "_shasum": "e97e6c9d3bf376eacb79babe6d906da20112d6d8",
  "_shrinkwrap": null,
  "_spec": "redux-promise",
  "_where": "/home/nineleaps/np/ReduxSimpleStarter",
  "author": {
    "email": "acdlite@me.com",
    "name": "Andrew Clark"
  },
  "bugs": {
    "url": "https://github.com/acdlite/redux-promise/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "flux-standard-action": "^0.6.1"
  },
  "deprecated": false,
  "description": "FSA-compliant promise middleware for Redux.",
  "devDependencies": {
    "babel": "^5.6.14",
    "babel-core": "^5.6.15",
    "babel-eslint": "^5.0.0",
    "chai": "^3.0.0",
    "chai-as-promised": "^5.1.0",
    "eslint": "^0.24.0",
    "eslint-config-airbnb": "0.0.6",
    "mocha": "^2.2.5",
    "sinon": "^1.15.4"
  },
  "homepage": "https://github.com/acdlite/redux-promise",
  "keywords": [
    "flux",
    "fsa",
    "middleware",
    "promise",
    "redux",
    "redux-middleware"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "name": "redux-promise",
  "optionalDependencies": {},
  "readme": "redux-promise\n=============\n\n[![build status](https://img.shields.io/travis/acdlite/redux-promise/master.svg?style=flat-square)](https://travis-ci.org/acdlite/redux-promise)\n[![npm version](https://img.shields.io/npm/v/redux-promise.svg?style=flat-square)](https://www.npmjs.com/package/redux-promise)\n\n[FSA](https://github.com/acdlite/flux-standard-action)-compliant promise [middleware](https://github.com/gaearon/redux/blob/master/docs/middleware.md) for Redux.\n\n```js\nnpm install --save redux-promise\n```\n\n## Usage\n\n```js\nimport promiseMiddleware from 'redux-promise';\n```\n\nThe default export is a middleware function. If it receives a promise, it will dispatch the resolved value of the promise. It will not dispatch anything if the promise rejects.\n\nIf it receives an Flux Standard Action whose `payload` is a promise, it will either\n\n- dispatch a copy of the action with the resolved value of the promise, and set `status` to `success`.\n- dispatch a copy of the action with the rejected value of the promise, and set `status` to `error`.\n\nThe middleware returns a promise to the caller so that it can wait for the operation to finish before continuing. This is especially useful for server-side rendering. If you find that a promise is not being returned, ensure that all middleware before it in the chain is also returning its `next()` call to the caller.\n\n## Using in combination with redux-actions\n\nBecause it supports FSA actions, you can use redux-promise in combination with [redux-actions](https://github.com/acdlite/redux-actions).\n\n### Example: Async action creators\n\nThis works just like in Flummox:\n\n```js\ncreateAction('FETCH_THING', async id => {\n  const result = await somePromise;\n  return result.someValue;\n});\n```\n\nUnlike Flummox, it will not perform a dispatch at the beginning of the operation, only at the end. We're still looking into the [best way to deal with optimistic updates](https://github.com/acdlite/flux-standard-action/issues/7). If you have a suggestion, let me know.\n\n\n### Example: Integrating with a web API module\n\nSay you have an API module that sends requests to a server. This is a common pattern in Flux apps. Assuming your module supports promises, it's really easy to create action creators that wrap around your API:\n\n```js\nimport { WebAPI } from '../utils/WebAPI';\n\nexport const getThing = createAction('GET_THING', WebAPI.getThing);\nexport const createThing = createAction('POST_THING', WebAPI.createThing);\nexport const updateThing = createAction('UPDATE_THING', WebAPI.updateThing);\nexport const deleteThing = createAction('DELETE_THING', WebAPI.deleteThing);\n```\n\n(You'll probably notice how this could be simplified this even further using something like lodash's `mapValues()`.)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/acdlite/redux-promise.git"
  },
  "scripts": {
    "prepublish": "make clean build",
    "test": "make test"
  },
  "version": "0.5.3"
}
